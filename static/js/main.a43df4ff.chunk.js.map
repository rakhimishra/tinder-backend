{"version":3,"sources":["Header.js","axios.js","TinderCards.js","SwipeButton.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","IconButton","fontSize","src","alt","instance","axios","create","baseURL","TinderCards","useState","People","setPeople","useEffect","a","get","req","data","console","log","fetchData","map","person","key","name","preventSwipe","onSwipe","dir","nameToDelete","onCardLeftScreen","style","backgroundImage","imgUrl","SwipeButton","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kVAKe,SAASA,IACtB,OACE,yBAAKC,UAAU,UACb,kBAACC,EAAA,EAAD,KACE,kBAAC,IAAD,CAAYC,SAAS,QAAQF,UAAU,iBAEzC,yBACEA,UAAU,cACVG,IAAI,mEACJC,IAAI,KAEN,kBAACH,EAAA,EAAD,KACA,kBAAC,IAAD,CAAWC,SAAS,QAAQF,UAAU,kB,sECb7BK,E,OAHEC,EAAMC,OAAO,CAC1BC,QAAQ,iDCiDGC,MA9Cf,WAAwB,IAAD,EACOC,mBAAS,IADhB,mBACdC,EADc,KACNC,EADM,KAsBrB,OAnBAC,qBAAU,WAAK,4CACb,4BAAAC,EAAA,sEACoBR,EAAMS,IAAI,iBAD9B,OACQC,EADR,OAEEJ,EAAUI,EAAIC,MACdC,QAAQC,IAAIH,EAAIC,MAHlB,4CADa,uBAAC,WAAD,wBAObG,KACA,IAYA,yBAAKpB,UAAU,gBACb,yBAAKA,UAAU,yBACZW,EAAOU,KAAI,SAACC,GAAD,OACV,kBAAC,IAAD,CACEtB,UAAU,QACVuB,IAAKD,EAAOE,KACZC,aAAc,CAAC,KAAM,QACrBC,QAAS,SAACC,GAAD,OAjBQC,EAiBaN,EAAOE,UAhB7CN,QAAQC,IAAI,YAAcS,GADb,IAAYA,GAkBjBC,iBAAkB,kBAbRL,EAayBF,EAAOE,UAZlDN,QAAQC,IAAIK,GADK,IAACA,IAeV,yBACExB,UAAU,OACV8B,MAAO,CAAEC,gBAAgB,OAAD,OAAST,EAAOU,OAAhB,OAExB,4BAAKV,EAAOE,c,mGCRXS,MAtBf,WACI,OACI,yBAAKjC,UAAU,eACX,kBAACC,EAAA,EAAD,CAAYD,UAAU,uBAClB,kBAAC,IAAD,CAAYE,SAAS,WAEzB,kBAACD,EAAA,EAAD,CAAYD,UAAU,qBAClB,kBAAC,IAAD,CAAWE,SAAS,WAExB,kBAACD,EAAA,EAAD,CAAYD,UAAU,qBAClB,kBAAC,IAAD,CAAcE,SAAS,WAE3B,kBAACD,EAAA,EAAD,CAAYD,UAAU,sBAClB,kBAAC,IAAD,CAAcE,SAAS,WAE3B,kBAACD,EAAA,EAAD,CAAYD,UAAU,yBAClB,kBAAC,IAAD,CAAWE,SAAS,aCbrBgC,MAVf,WACE,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.a43df4ff.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ForumIcon from \"@material-ui/icons/Forum\";\r\nimport \"./Header.css\";\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <IconButton>\r\n        <PersonIcon fontSize=\"large\" className=\"header_icon\" />\r\n      </IconButton>\r\n      <img\r\n        className=\"header_logo\"\r\n        src=\"https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png\"\r\n        alt=\"\"\r\n      />\r\n      <IconButton>\r\n      <ForumIcon fontSize=\"large\" className=\"header_icon\" />\r\n      </IconButton>\r\n      \r\n    </div>\r\n  );\r\n}\r\n","import axios from 'axios';\r\nconst instance = axios.create({\r\n    baseURL:'https://tinder-server-backend.herokuapp.com/'\r\n})\r\nexport default instance;","import React, { useState ,useEffect} from \"react\";\r\nimport \"./TinderCards.css\";\r\nimport TinderCard from \"react-tinder-card\";\r\nimport axios from \"./axios\";\r\n\r\nfunction TinderCards() {\r\n  const [People, setPeople] = useState([]);\r\n\r\n  useEffect(() =>{\r\n    async function fetchData() {\r\n      const req = await axios.get('./tinder/card');\r\n      setPeople(req.data);\r\n      console.log(req.data)\r\n  \r\n    }\r\n    fetchData();\r\n  },[])\r\n\r\n  const swiped = (direction, nameToDelete) => {\r\n    console.log(\"removing \" + nameToDelete);\r\n    // setLastDirection(direction)\r\n  };\r\n\r\n  const outOfFrame = (name) => {\r\n    console.log(name);\r\n  };\r\n\r\n  return (\r\n    <div className=\"tinder_cards\">\r\n      <div className=\"tinderCards_container\">\r\n        {People.map((person) => (\r\n          <TinderCard\r\n            className=\"swipe\"\r\n            key={person.name}\r\n            preventSwipe={[\"up\", \"down\"]}\r\n            onSwipe={(dir) => swiped(dir, person.name)}\r\n            onCardLeftScreen={() => outOfFrame(person.name)}\r\n          >\r\n            <div\r\n              className=\"card\"\r\n              style={{ backgroundImage: `url(${person.imgUrl})`  }}\r\n            >\r\n              <h3>{person.name}</h3>\r\n            </div>\r\n          </TinderCard> \r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TinderCards;\r\n","import React from 'react'\r\nimport './swipeButton.css';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport StarRateIcon from '@material-ui/icons/StarRate';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FlashIcon from '@material-ui/icons/FlashOn';\r\n \r\n\r\n\r\nfunction SwipeButton() {\r\n    return (\r\n        <div className=\"swipeButton\">\r\n            <IconButton className=\"swipeButtons_repeat\">\r\n                <ReplayIcon fontSize=\"large\" />\r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons_left\">\r\n                <CloseIcon fontSize=\"large\" />\r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons_star\">\r\n                <StarRateIcon fontSize=\"large\" />\r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons_right\">\r\n                <FavoriteIcon fontSize=\"large\" />\r\n            </IconButton>\r\n            <IconButton className=\"swipeButtons_lighting\">\r\n                <FlashIcon fontSize=\"large\" />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SwipeButton;\r\n","import React from 'react';\nimport Header from './Header';\nimport TinderCards from './TinderCards'\nimport './App.css';\nimport SwipeButton from './SwipeButton';\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <TinderCards />\n      <SwipeButton />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}